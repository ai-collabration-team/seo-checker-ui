You are an expert software architect tasked with creating comprehensive rules for Cursor AI to follow when working with seo-checker. 

# Cursor AI Rules for seo-checker

## Project Overview
An application handles techincal seo check for a web site.  

## Project Context
This document defines the rules and guidelines for Cursor AI when working with seo-checker.

### Technical Stack
- Platform: web
- Framework: next
- Key Dependencies:

- tailwind-next

- shadcn-next

- zustand-next

- next-auth

- swr

- prisma-next


## Code Generation Rules

### 1. Project Structure
Follow these directory and file organization rules:
- Maintain the established project structure
- Place components in appropriate directories
- Follow file naming conventions
- Respect module boundaries
- Keep related files together

### 2. Code Style
Adhere to these formatting rules:
- Use consistent indentation
- Follow line length limits
- Apply proper spacing
- Use appropriate brackets
- Maintain consistent naming
- Follow TypeScript best practices

### 3. Component Guidelines
When generating components:

#### Component Structure
- Each component should be in its own directory
- Directory structure should be:
  ```
  components/
    ComponentName/
      index.ts              # Exports the component
      ComponentName.tsx     # Pure view component
      ComponentName.hook.ts   # Custom hook for logic
      ComponentName.test.ts # Tests
      types.ts             # Component specific types
  ```

#### Component Logic Separation
- Separate business logic from view logic using custom hooks
- Hook naming convention: `useComponentName`
- Hook should handle:
  - State management
  - Event handlers
  - Data fetching
  - Computations
  - Side effects

#### View Component Guidelines
- Keep components focused on rendering
- Avoid business logic in view components
- Use TypeScript for prop types
- Implement proper error boundaries
- Follow accessibility best practices

#### Custom Hook Guidelines
- Export hook return type: `export type UseComponentNameReturn = ReturnType<typeof useComponentName>`
- Handle all state management
- Provide strongly typed event handlers
- Handle side effects
- Manage API calls and data transformation

#### Testing Requirements
- Test view components and hooks separately
- Mock hook results for view tests
- Test business logic in hook tests
- Test error states and loading states

### 4. Type System
For TypeScript implementation:
- Use strict type checking
- Create proper interfaces
- Implement generics correctly
- Handle null/undefined properly
- Use type guards when needed
- Document complex types
- Avoid any type

### 5. API Integration
When working with APIs:
- Follow RESTful conventions
- Implement proper error handling
- Use type-safe requests
- Handle authentication correctly
- Validate API responses
- Document API usage
- Implement proper caching

### 6. State Management
For managing application state:
- Use appropriate state solutions
- Follow immutability principles
- Implement proper actions/reducers
- Handle side effects correctly
- Optimize state updates
- Document state structure
- Implement proper selectors

### 7. Testing Requirements
Generate tests following these rules:
- Write comprehensive unit tests
- Implement integration tests
- Follow testing best practices
- Use proper mocking
- Test error scenarios
- Maintain test coverage
- Document test cases

### 8. Security Guidelines
Enforce security practices:
- Validate all inputs
- Sanitize data output
- Handle authentication properly
- Protect sensitive data
- Follow OWASP guidelines
- Implement proper CORS
- Use secure dependencies

### 9. Performance Rules
Optimize for performance:
- Implement code splitting
- Use lazy loading
- Optimize bundle size
- Minimize re-renders
- Use proper caching
- Optimize assets
- Follow performance best practices

### 10. Documentation
Generate documentation that:
- Is clear and concise
- Includes JSDoc comments
- Provides usage examples
- Documents edge cases
- Explains complex logic
- Includes type information
- Follows documentation standards




## Best Practices

### 1. Code Quality
- Write self-documenting code
- Keep functions small and focused
- Follow DRY principles
- Use meaningful names
- Implement proper error handling
- Write maintainable code

### 2. Performance
- Optimize bundle size
- Implement code splitting
- Use proper caching
- Optimize rendering
- Follow lazy loading patterns

### 3. Security
- Validate user input
- Sanitize data output
- Use proper authentication
- Protect sensitive data
- Follow security best practices

After generating the content, save it to the .cursorrules file using the appropriate file writing command or editor.

Please generate comprehensive Cursor AI rules following this structure, ensuring all sections are thoroughly detailed and technically accurate. The final document should be saved as '.cursorrules' in the project root directory.

Note: 
- Customize rules based on project requirements
- Add project-specific patterns and conventions
- Include examples for complex rules
- Update rules as project evolves
- Remove any sections that don't apply